{"pages":[],"posts":[{"title":"Hexo-Icarus主题去除谷歌字体，提升加载速度","text":"背景在使用github pages服务搭建Hexo博客的时候使用icarus作为主题，使用hexo generate和hexo deploy命令生成并部署后，在访问主页的时候发现加载速度特别慢，通过浏览器调试模式发现了加载速度慢的原因从调试截图中可以看到，请求中有一个谷歌字体的失败请求，因为谷歌被墙的原因，国内无法加载这个字体，所以导致整个页面的请求都在等待这个请求直至请求失败，页面最终加载成功 通过关键字翻阅icarus主题的文件，在themes\\icarus\\layout\\common\\head.ejs文件查找到了字体引用的代码 12345678910111213141516171819202122232425262728293031323334353637383940&lt;meta charset=&quot;utf-8&quot;&gt;&lt;title&gt;&lt;%= page_title() %&gt;&lt;/title&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, maximum-scale=1&quot; /&gt;&lt;%- meta() %&gt;&lt;% if (has_config(&apos;open_graph&apos;)) { %&gt; &lt;%- open_graph({ twitter_id: get_config(&apos;open_graph.twitter_id&apos;), twitter_site: get_config(&apos;open_graph.twitter_site&apos;), google_plus: get_config(&apos;open_graph.google_plus&apos;), fb_admins: get_config(&apos;open_graph.fb_admins&apos;), fb_app_id: get_config(&apos;open_graph.fb_app_id&apos;), image: get_og_image(page) }) %&gt;&lt;% } %&gt;&lt;% if (has_config(&apos;canonical_url&apos;)) { %&gt;&lt;link rel=&quot;canonical&quot; href=&quot;&lt;%- get_config(&apos;canonical_url&apos;) %&gt;&quot; /&gt;&lt;% } %&gt;&lt;% if (has_config(&apos;rss&apos;)) { %&gt;&lt;link rel=&quot;alternative&quot; href=&quot;&lt;%- get_config(&apos;rss&apos;) %&gt;&quot; title=&quot;&lt;%= get_config(&apos;title&apos;) %&gt;&quot; type=&quot;application/atom+xml&quot;&gt;&lt;% } %&gt;&lt;% if (has_config(&apos;favicon&apos;)) { %&gt;&lt;link rel=&quot;icon&quot; href=&quot;&lt;%- url_for(get_config(&apos;favicon&apos;)) %&gt;&quot;&gt;&lt;% } %&gt;&lt;%- _css(cdn(&apos;bulma&apos;, &apos;0.7.2&apos;, &apos;css/bulma.css&apos;)) %&gt;&lt;%- _css(iconcdn()) %&gt;&lt;%- _css(fontcdn(&apos;Ubuntu:400,600|Source+Code+Pro&apos;)) %&gt;&lt;%- _css(cdn(&apos;highlight.js&apos;, &apos;9.12.0&apos;, &apos;styles/&apos; + get_config(&apos;article.highlight&apos;) + &apos;.css&apos;)) %&gt;&lt;% if (has_config(&apos;plugins&apos;)) { %&gt; &lt;% for (let plugin in get_config(&apos;plugins&apos;)) { %&gt; &lt;%- partial(&apos;plugin/&apos; + plugin, { head: true, plugin: get_config(&apos;plugins&apos;)[plugin] }) %&gt; &lt;% } %&gt;&lt;% } %&gt;&lt;%- _css(&apos;css/style&apos;) %&gt; 删除第31行代码，重新生成部署 &lt;%- _css(fontcdn(&apos;Ubuntu:400,600|Source+Code+Pro&apos;)) %&gt;","link":"/2019/07/09/Hexo-Icarus主题去除谷歌字体，提升加载速度/"},{"title":"git常用命令和故障","text":"问题1、git 出现 SSL certificate problem: unable to get local issuer certificategit config --global http.sslVerify false","link":"/2019/07/09/git常用命令和故障/"},{"title":"spring-boot运行jar命令提示没有主清单属性","text":"背景在开发项目的过程中，spring-boot项目打包成可执行jar，一直能正常运行，后来需要引入同事封装的一个权限框架，依赖了两个jar包，引入之后再使用mvn package将项目打包成可执行jar，运行时就会显示没有主清单属性 问题查看jar包中MANIFEST.MF文件，没有发现Main-Class等配置，从而导致spring-boot运行jar命令提示没有主清单属性 1234Manifest-Version: 1.0Built-By: KailACreated-By: Apache Maven 3.6.0Build-Jdk: 1.8.0_141 经过网上查阅资料不断排查，发现项目内除了springboot主工程main方法的类使用了@SpringBootApplication注解，新依赖的jar包里也有一个带有main方法的类并且都使用了@SpringBootApplication注解 情景再现如果工程内有两个带有main方法的类并且都使用@SpringBootApplication注解（或者另一种情形：有两个main方法并且所在类都没有使用@SpringBootApplication注解，但是如果有多个main方法，只有一个使用@SpringBootApplication注解并不会引发此问题），同时pom.xml的maven打包插件配置如下： 123456789101112&lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;version&gt;1.5.3.RELEASE&lt;/version&gt; &lt;executions&gt; &lt;execution&gt; &lt;goals&gt; &lt;goal&gt;repackage&lt;/goal&gt; &lt;/goals&gt; &lt;/execution&gt; &lt;/executions&gt;&lt;/plugin&gt; 解决方法查看Springboot官方文档的8.1.2. Packaging Executable Jar and War Files关于maven打包插件的说明 当工程没有指定&lt;mainClass&gt;或者继承了spring-boot-starter-parent并且属性未配置时，插件会自动寻找签名是public static void main(String[] args)的方法，当存在两个main方法时，插件会无法识别哪一个main方法才是主函数 1、通用解决方法：&lt;configuration&gt;下配置mainClass，指定程序入口。 123456789101112131415161718&lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;version&gt;1.5.3.RELEASE&lt;/version&gt; &lt;configuration&gt; &lt;!-- 解决本地jar不能打入部署包的问题 --&gt; &lt;includeSystemScope&gt;true&lt;/includeSystemScope&gt; &lt;!-- 指定程序入口 --&gt; &lt;mainClass&gt;app.Application&lt;/mainClass&gt; &lt;/configuration&gt; &lt;executions&gt; &lt;execution&gt; &lt;goals&gt; &lt;goal&gt;repackage&lt;/goal&gt; &lt;/goals&gt; &lt;/execution&gt; &lt;/executions&gt;&lt;/plugin&gt; 配置打包后的MANIFEST.MF文件 123456789Manifest-Version: 1.0Built-By: KailAStart-Class: app.ApplicationSpring-Boot-Classes: BOOT-INF/classes/Spring-Boot-Lib: BOOT-INF/lib/Spring-Boot-Version: 1.5.8.RELEASECreated-By: Apache Maven 3.6.0Build-Jdk: 1.8.0_141Main-Class: org.springframework.boot.loader.JarLauncher 2、解决方法二，此方法有一定的限制，只有在你的pom.xml继承自spring-boot-starter-parent可以直接在&lt;properties&gt;配置&lt;start-class&gt;,直接对应清单文件里的Start-Class 123&lt;properties&gt; &lt;start-class&gt;com.xx.webapps.api.main.WebappsApiBidMain&lt;/start-class&gt;&lt;/properties&gt; 参考文章： Spring Boot Maven Plugin打包异常及三种解决方法：Unable to find main class maven引入本地jar不能打入部署包的问题解决","link":"/2019/07/09/spring-boot运行jar命令提示没有主清单属性/"}],"tags":[{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"icarus","slug":"icarus","link":"/tags/icarus/"},{"name":"git","slug":"git","link":"/tags/git/"},{"name":"故障","slug":"故障","link":"/tags/故障/"},{"name":"java","slug":"java","link":"/tags/java/"},{"name":"springboot","slug":"springboot","link":"/tags/springboot/"},{"name":"maven","slug":"maven","link":"/tags/maven/"}],"categories":[{"name":"Hexo","slug":"Hexo","link":"/categories/Hexo/"},{"name":"GIT学习","slug":"GIT学习","link":"/categories/GIT学习/"},{"name":"开发问题记录","slug":"开发问题记录","link":"/categories/开发问题记录/"}]}