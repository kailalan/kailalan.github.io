{"pages":[],"posts":[{"title":"ArrayList的remove方法错误使用导致的程序逻辑错误","text":"","link":"/2019/07/09/ArrayList的remove方法错误使用导致的程序逻辑错误/"},{"title":"Hexo-Icarus主题去除谷歌字体，提升加载速度","text":"背景在使用github pages服务搭建Hexo博客的时候使用icarus作为主题，使用hexo generate和hexo deploy命令生成并部署后，在访问主页的时候发现加载速度特别慢，通过浏览器调试模式发现了加载速度慢的原因从调试截图中可以看到，请求中有一个谷歌字体的失败请求，因为谷歌被墙的原因，国内无法加载这个字体，所以导致整个页面的请求都在等待这个请求直至请求失败，页面最终加载成功 通过关键字翻阅icarus主题的文件，在themes\\icarus\\layout\\common\\head.ejs文件查找到了字体引用的代码 12345678910111213141516171819202122232425262728293031323334353637383940&lt;meta charset=&quot;utf-8&quot;&gt;&lt;title&gt;&lt;%= page_title() %&gt;&lt;/title&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, maximum-scale=1&quot; /&gt;&lt;%- meta() %&gt;&lt;% if (has_config(&apos;open_graph&apos;)) { %&gt; &lt;%- open_graph({ twitter_id: get_config(&apos;open_graph.twitter_id&apos;), twitter_site: get_config(&apos;open_graph.twitter_site&apos;), google_plus: get_config(&apos;open_graph.google_plus&apos;), fb_admins: get_config(&apos;open_graph.fb_admins&apos;), fb_app_id: get_config(&apos;open_graph.fb_app_id&apos;), image: get_og_image(page) }) %&gt;&lt;% } %&gt;&lt;% if (has_config(&apos;canonical_url&apos;)) { %&gt;&lt;link rel=&quot;canonical&quot; href=&quot;&lt;%- get_config(&apos;canonical_url&apos;) %&gt;&quot; /&gt;&lt;% } %&gt;&lt;% if (has_config(&apos;rss&apos;)) { %&gt;&lt;link rel=&quot;alternative&quot; href=&quot;&lt;%- get_config(&apos;rss&apos;) %&gt;&quot; title=&quot;&lt;%= get_config(&apos;title&apos;) %&gt;&quot; type=&quot;application/atom+xml&quot;&gt;&lt;% } %&gt;&lt;% if (has_config(&apos;favicon&apos;)) { %&gt;&lt;link rel=&quot;icon&quot; href=&quot;&lt;%- url_for(get_config(&apos;favicon&apos;)) %&gt;&quot;&gt;&lt;% } %&gt;&lt;%- _css(cdn(&apos;bulma&apos;, &apos;0.7.2&apos;, &apos;css/bulma.css&apos;)) %&gt;&lt;%- _css(iconcdn()) %&gt;&lt;%- _css(fontcdn(&apos;Ubuntu:400,600|Source+Code+Pro&apos;)) %&gt;&lt;%- _css(cdn(&apos;highlight.js&apos;, &apos;9.12.0&apos;, &apos;styles/&apos; + get_config(&apos;article.highlight&apos;) + &apos;.css&apos;)) %&gt;&lt;% if (has_config(&apos;plugins&apos;)) { %&gt; &lt;% for (let plugin in get_config(&apos;plugins&apos;)) { %&gt; &lt;%- partial(&apos;plugin/&apos; + plugin, { head: true, plugin: get_config(&apos;plugins&apos;)[plugin] }) %&gt; &lt;% } %&gt;&lt;% } %&gt;&lt;%- _css(&apos;css/style&apos;) %&gt; 删除第31行代码，重新生成部署 &lt;%- _css(fontcdn(&apos;Ubuntu:400,600|Source+Code+Pro&apos;)) %&gt;","link":"/2019/07/09/Hexo-Icarus主题去除谷歌字体，提升加载速度/"},{"title":"Hexo-Icarus主题引入live2d插件和解决配置冲突","text":"前言搭建好自己Hexo博客，大家都会绞尽脑汁去装修自己的博客页面，作为二次元的小萌希望能在自己的博客上放上自己喜欢的动漫人物或者看板小挂件。在网上看了很多大牛分享的Hexo博客搭建教程中都有live2d插件身影出现。 live2d是一种应用于电子游戏的绘图渲染技术，通过一系列的连续图像和人物建模来生成一种类似三维模型的二维图像，现在广泛应用于手游，桌面动态壁纸等领域，各大博客系统也都推出或是第三方插件适配live2d。 插件EYHN/hexo-helper-live2d 模型下载 模型预览 对live2d插件感兴趣的朋友可以去的github上看看，readme.md有中文文档，遇到问题可以在项目里的issue有没有人遇到跟你一样的问题，也可以提交一个issue，作者或者各位大牛会出方案解决你的问题。 安装进入hexo博客根目录，打开gitbash或者cmd等命令行工具输入以下命令安装hexo-helper-live2d插件： npm install --save hexo-helper-live2d配置插件的配置可以直接配置在Hexo根目录下的配置文件_config.yml中，也可以配置在主题目录themes目录下的配置文件_config.yml文件中，一般推荐配置在Hexo根目录下的配置文件中，防止更换主题后live2d失效。但是如果你使用的主题是icarus,那么只能够配置在Hexo根目录下的配置文件中，不能配置到icarus主题目录下的配置文件中。 当你把插件的配置放在icarus主题的配置文件时，无论你修改插件的哪个参数都不会起作用，live2d插件虽然启动，但是却永远是shizuku看板娘，模型、位置、大小等都不能配置。 通用配置：​ live2d: enable: true # enable: false scriptFrom: local # 默认 pluginRootPath: live2dw/ # 插件在站点上的根目录(相对路径) pluginJsPath: lib/ # 脚本文件相对与插件根目录路径 pluginModelPath: assets/ # 模型文件相对与插件根目录路径 # scriptFrom: jsdelivr # jsdelivr CDN # scriptFrom: unpkg # unpkg CDN # scriptFrom: https://cdn.jsdelivr.net/npm/live2d-widget@3.x/lib/L2Dwidget.min.js # 你的自定义 url tagMode: false # 标签模式, 是否仅替换 live2d tag标签而非插入到所有页面中 debug: false # 调试, 是否在控制台输出日志 model: use: live2d-widget-model-wanko # npm-module package name # use: wanko # 博客根目录/live2d_models/ 下的目录名 # use: ./wives/wanko # 相对于博客根目录的路径 # use: https://cdn.jsdelivr.net/npm/live2d-widget-model-wanko@1.0.5/assets/wanko.model.json # 你的自定义 url 详细配置(本配置可以定义挂件位置、大小、缩放和手机端是否显示)​ live2d: enable: true scriptFrom: local pluginRootPath: live2dw/ pluginJsPath: lib/ pluginModelPath: assets/ tagMode: false debug: false model: use: live2d-widget-model-wanko display: position: right width: 150 height: 300 mobile: show: true react: opacity: 0.7 高级配置 用户高度自定义设置，小白玩家不必理会，老司机请随意，官方API地址：L2Dwidget | live2d-widget.js 模型模型的安装有两种方式： 1、使用 npm 下载的模型直接通过npm来安装，然后编辑配置文件中的model.use项，将其修改为模型的包名​ npm install live2d-widget-model-shizuku 所有模型列表如下： live2d-widget-model-chitose live2d-widget-model-epsilon2_1 live2d-widget-model-gf live2d-widget-model-haru/01 (use npm install –save live2d-widget-model-haru) live2d-widget-model-haru/02 (use npm install –save live2d-widget-model-haru) live2d-widget-model-haruto live2d-widget-model-hibiki live2d-widget-model-hijiki live2d-widget-model-izumi live2d-widget-model-koharu live2d-widget-model-miku live2d-widget-model-ni-j live2d-widget-model-nico live2d-widget-model-nietzsche live2d-widget-model-nipsilon live2d-widget-model-nito live2d-widget-model-shizuku live2d-widget-model-tororo live2d-widget-model-tsumiki live2d-widget-model-unitychan live2d-widget-model-wanko live2d-widget-model-z16 2、使用自己下载的模型方式一（推荐使用）： 在博客根目录下创建一个live2d_models文件夹 在此文件夹内新建一个子文件夹 将你的Live2D模型复制到这个子文件夹中，自有模型应当有一个.model.json文件 (例如 hijiki.model.json) 将子文件夹的名称配置到配置文件中的model.use项 目录结构如下 1234567891011121314151617181920212223242526live2d_models └─hijiki │ .gitignore │ package-lock.json │ package.json │ └─assets │ hijiki.model.json │ hijiki.pose.json │ ├─moc │ │ hijiki.moc │ │ │ └─hijiki.2048 │ texture_00.png │ └─mtn 00_idle.mtn 01.mtn 02.mtn 03.mtn 04.mtn 05.mtn 06.mtn 07.mtn 08.mtn 方式二： 可直接输入相对于博客根目录的自定义路径到model.use中,示例: ./wives/shizuku 问题以上教程都是整合网上Hexo的live2d插件安装教程而来的，网上的教程都是在官方主题或者NexT主题的基础上进行配置的，我的博客使用的是icarus主题，使用网上的教程进行配置时除了会出现上面提到的主题配置文件配置live2d插件无效的问题,还有一个就是浏览器的控制台报错。虽然这个报错不影响页面，作为完美主义者和有一点小强迫症的我，怎么能让我的小站出现报红，通过关键字排查，终于发现问题所在和解决方案。 在icarus主题配置文件`_config.yml的plugins.mathjax属性默认是true,将该属性值改为false,重新生成部署，完美！MathJax是前端支持数学公式的一个插件，为了让前端支持LaTex的数学公式，并且渲染好看的样式。关闭了这个插件不知道会影响到什么，知道的大大麻烦留言一下，谢谢！ 参考文章： Hexo 博客利用 live2d 插件放置一个萌萌哒看板娘 在Hexo博客上添加可爱的Live 2D模型","link":"/2019/07/10/Hexo-Icarus主题引入live2d插件和解决配置冲突/"},{"title":"git常用命令和故障","text":"问题1、git 出现 SSL certificate problem: unable to get local issuer certificategit config --global http.sslVerify false","link":"/2019/07/09/git常用命令和故障/"},{"title":"spring-boot运行jar命令提示没有主清单属性","text":"背景在开发项目的过程中，spring-boot项目打包成可执行jar，一直能正常运行，后来需要引入同事封装的一个权限框架，依赖了两个jar包，引入之后再使用mvn package将项目打包成可执行jar，运行时就会显示没有主清单属性 问题查看jar包中MANIFEST.MF文件，没有发现Main-Class等配置，从而导致spring-boot运行jar命令提示没有主清单属性 1234Manifest-Version: 1.0Built-By: KailACreated-By: Apache Maven 3.6.0Build-Jdk: 1.8.0_141 经过网上查阅资料不断排查，发现项目内除了springboot主工程main方法的类使用了@SpringBootApplication注解，新依赖的jar包里也有一个带有main方法的类并且都使用了@SpringBootApplication注解 情景再现如果工程内有两个带有main方法的类并且都使用@SpringBootApplication注解（或者另一种情形：有两个main方法并且所在类都没有使用@SpringBootApplication注解，但是如果有多个main方法，只有一个使用@SpringBootApplication注解并不会引发此问题），同时pom.xml的maven打包插件配置如下： 123456789101112&lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;version&gt;1.5.3.RELEASE&lt;/version&gt; &lt;executions&gt; &lt;execution&gt; &lt;goals&gt; &lt;goal&gt;repackage&lt;/goal&gt; &lt;/goals&gt; &lt;/execution&gt; &lt;/executions&gt;&lt;/plugin&gt; 解决方法查看Springboot官方文档的8.1.2. Packaging Executable Jar and War Files关于maven打包插件的说明 当工程没有指定&lt;mainClass&gt;或者继承了spring-boot-starter-parent并且属性未配置时，插件会自动寻找签名是public static void main(String[] args)的方法，当存在两个main方法时，插件会无法识别哪一个main方法才是主函数 1、通用解决方法：&lt;configuration&gt;下配置mainClass，指定程序入口。 123456789101112131415161718&lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;version&gt;1.5.3.RELEASE&lt;/version&gt; &lt;configuration&gt; &lt;!-- 解决本地jar不能打入部署包的问题 --&gt; &lt;includeSystemScope&gt;true&lt;/includeSystemScope&gt; &lt;!-- 指定程序入口 --&gt; &lt;mainClass&gt;app.Application&lt;/mainClass&gt; &lt;/configuration&gt; &lt;executions&gt; &lt;execution&gt; &lt;goals&gt; &lt;goal&gt;repackage&lt;/goal&gt; &lt;/goals&gt; &lt;/execution&gt; &lt;/executions&gt;&lt;/plugin&gt; 配置打包后的MANIFEST.MF文件 123456789Manifest-Version: 1.0Built-By: KailAStart-Class: app.ApplicationSpring-Boot-Classes: BOOT-INF/classes/Spring-Boot-Lib: BOOT-INF/lib/Spring-Boot-Version: 1.5.8.RELEASECreated-By: Apache Maven 3.6.0Build-Jdk: 1.8.0_141Main-Class: org.springframework.boot.loader.JarLauncher 2、解决方法二，此方法有一定的限制，只有在你的pom.xml继承自spring-boot-starter-parent可以直接在&lt;properties&gt;配置&lt;start-class&gt;,直接对应清单文件里的Start-Class 123&lt;properties&gt; &lt;start-class&gt;com.xx.webapps.api.main.WebappsApiBidMain&lt;/start-class&gt;&lt;/properties&gt; 参考文章： Spring Boot Maven Plugin打包异常及三种解决方法：Unable to find main class maven引入本地jar不能打入部署包的问题解决","link":"/2019/07/09/spring-boot运行jar命令提示没有主清单属性/"}],"tags":[{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"icarus","slug":"icarus","link":"/tags/icarus/"},{"name":"live2d","slug":"live2d","link":"/tags/live2d/"},{"name":"安装","slug":"安装","link":"/tags/安装/"},{"name":"故障","slug":"故障","link":"/tags/故障/"},{"name":"git","slug":"git","link":"/tags/git/"},{"name":"java","slug":"java","link":"/tags/java/"},{"name":"springboot","slug":"springboot","link":"/tags/springboot/"},{"name":"maven","slug":"maven","link":"/tags/maven/"}],"categories":[{"name":"Hexo","slug":"Hexo","link":"/categories/Hexo/"},{"name":"GIT学习","slug":"GIT学习","link":"/categories/GIT学习/"},{"name":"开发问题记录","slug":"开发问题记录","link":"/categories/开发问题记录/"}]}